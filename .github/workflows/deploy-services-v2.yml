name: Deploy Calowin Services to Hugging Face

on:
  push:
    branches: [ main ]

  workflow_dispatch:

permissions:
  contents: read
  actions: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.filter.outputs.services }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed services
        id: filter
        run: |
          echo "Detecting changed services..."
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | cut -d/ -f1 | sort -u)

          SERVICES=()
          for dir in $CHANGED; do
            if [ -d "$dir/src" ] || [ -f "$dir/Dockerfile" ] || [ -f "$dir/README.md" ]; then
              SERVICES+=("\"$dir\"")
            fi
          done

          JSON="[$(IFS=,; echo "${SERVICES[*]}")]"
          echo "services=$JSON" >> $GITHUB_OUTPUT
          echo "Changed services detected: $JSON"

  build-jar:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-services != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if src changed
        id: check
        run: |
          SERVICE_DIR=${{ matrix.service }}
          echo "Checking changes in $SERVICE_DIR"

          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^$SERVICE_DIR/src/"; then
            echo "src_changed=true" >> $GITHUB_ENV
            echo "Source code changed in $SERVICE_DIR"
          else
            echo "src_changed=false" >> $GITHUB_ENV
          fi

      - name: Set up JDK
        if: env.src_changed == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        if: env.src_changed == 'true'
        run: |
          cd ${{ matrix.service }}
          mvn clean package -DskipTests
          echo "Contents of target folder:"
          ls -lh target/
          echo "Built $(ls target/*-SNAPSHOT.jar)"

      - name: Upload built JAR
        if: env.src_changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-jar
          path: ${{ matrix.service }}/target/*-SNAPSHOT.jar

      - name: Update last JAR run ID repository variable
        if: env.src_changed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const service = "${{ matrix.service }}";
            const runId = process.env.GITHUB_RUN_ID;
            const varName = `LAST_RUN_ID_${service}`;
            try {
              await github.request('PUT /repos/{owner}/{repo}/actions/variables/{name}', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: varName,
                value: runId
              });
              console.log(`Updated repository variable ${varName} = ${runId}`);
            } catch (err) {
              if (err.status === 404) {
                await github.request('POST /repos/{owner}/{repo}/actions/variables', {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: varName,
                  value: process.env.GITHUB_RUN_ID,
                  visibility: 'private'
                });
                console.log(`Created variable ${varName}`);
              } else {
                throw err;
              }
            }

  deploy:
    needs: [detect-changes, build-jar]
    if: needs.detect-changes.outputs.changed-services != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect type of changes
        id: detect
        run: |
          SERVICE_DIR=${{ matrix.service }}
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^$SERVICE_DIR/src/"; then
            echo "src_changed=true" >> $GITHUB_ENV
            echo "Source code changed in $SERVICE_DIR"
          else
            echo "src_changed=false" >> $GITHUB_ENV
          fi
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E "^$SERVICE_DIR/(Dockerfile|README.md)"; then
            echo "non_src_changed=true" >> $GITHUB_ENV
          else
            echo "non_src_changed=false" >> $GITHUB_ENV
          fi

      - name: Push non-src files to HF
        if: env.non_src_changed == 'true'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_USERNAME: ${{ secrets.HF_USERNAME }}
        run: |
          SERVICE_DIR=${{ matrix.service }}
          GITHUB_REPO="${{ github.repository }}"

          if [ "$src_changed" == "true" ]; then
            GITHUB_RUN_ID="${{ github.run_id }}"
          else
            GITHUB_RUN_ID=$(gh api repos/${{ github.repository }}/variables/LAST_RUN_ID_${SERVICE_DIR} \
                     -q '.value' \
                     -H "Accept: application/vnd.github+json" \
                     -H "Authorization: token ${{ secrets.GH_TOKEN }}")
          fi

          git clone https://$HF_USERNAME:$HF_TOKEN@huggingface.co/spaces/$HF_USERNAME/$SERVICE_DIR hf_upload/$SERVICE_DIR

          cd hf_upload/$SERVICE_DIR
          git checkout main || git checkout -b main

          cp ../../$SERVICE_DIR/Dockerfile . || true
          cp ../../$SERVICE_DIR/README.md . || true

          cat <<EOF > .huggingface.yaml
          build:
            args:
              SERVICE_NAME: "$SERVICE_DIR"
              GITHUB_RUN_ID: "$GITHUB_RUN_ID"
              GITHUB_REPO: "$GITHUB_REPO"
          EOF

          git config user.name "CI Bot"
          git config user.email "ci-bot@github.com"

          git add -A

          if ! git diff --cached --quiet; then
            git commit -m "Deploy non-src files update for $SERVICE_DIR"
            git push https://$HF_USERNAME:$HF_TOKEN@huggingface.co/spaces/$HF_USERNAME/$SERVICE_DIR main
            echo "Pushed updates for $SERVICE_DIR"
          else
            echo "No changes to commit for $SERVICE_DIR"
          fi

      - name: Trigger HF rebuild for JAR-only changes
        if: env.src_changed == 'true' && env.non_src_changed == 'false'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_USERNAME: ${{ secrets.HF_USERNAME }}
        run: |
          SERVICE_DIR=${{ matrix.service }}
          echo "Triggering HF rebuild for JAR-only change..."
          curl -X POST \
               -H "Authorization: Bearer $HF_TOKEN" \
               -H "Accept: application/json" \
               -d "{\"build_args\":{\"SERVICE_NAME\":\"$SERVICE_DIR\",\"GITHUB_RUN_ID\":\"$GITHUB_RUN_ID\",\"GITHUB_REPO\":\"${{ github.repository }}\"}}" \
               https://huggingface.co/api/spaces/$HF_USERNAME/$SERVICE_DIR/rebuild
          echo "HF rebuild triggered for $SERVICE_DIR"

