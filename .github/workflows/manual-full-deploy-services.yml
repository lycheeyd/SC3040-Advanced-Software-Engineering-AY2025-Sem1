name: Manual Full Deploy to Hugging Face

on:
  workflow_dispatch:
    inputs:
      services:
        description: "Select one or more services to deploy"
        type: choice
        required: true
        default: ALL
        options:
          - CalowinAccount
          - CalowinFriends
          - CalowinNotification
          - CalowinSpringNode
          - CalowinTrip
          - CalowinWellnessZone
          - ALL

permissions:
  contents: read
  actions: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{
          github.event.inputs.services == 'ALL' &&
          fromJSON(format('["{0}"]', [
            'CalowinAccount',
            'CalowinFriends',
            'CalowinNotification',
            'CalowinSpringNode',
            'CalowinTrip',
            'CalowinWellnessZone'
          ]) ||
          fromJSON(format('["{0}"]', github.event.inputs.services))
          }}
      
    outputs:
      built-services: ${{ steps.collect.outputs.built }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build fresh JAR
        id: build
        run: |
          cd ${{ matrix.service }}
          mvn clean package -DskipTests
          echo "Built $(ls target/*-SNAPSHOT.jar)"

      - name: Upload built JAR
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-jar
          path: ${{ matrix.service }}/target/*-SNAPSHOT.jar

      - name: Update LAST_BUILD_ID repository variable
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          VAR_NAME="LAST_BUILD_ID_${{ matrix.service }}"
          gh variable set "$VAR_NAME" --repo "${{ github.repository }}" --body "${{ github.run_id }}"
          echo "Updated repository variable $VAR_NAME = ${{ github.run_id }}"

      - name: Push to HuggingFace
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_USERNAME: ${{ secrets.HF_USERNAME }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          SERVICE_DIR=${{ matrix.service }}
          GITHUB_REPO="${{ github.repository }}"
          GITHUB_BUILD_ID="${{ github.run_id }}"   # always use fresh run_id

          echo "Using GITHUB_BUILD_ID: $GITHUB_BUILD_ID"

          # Clone HF repo
          git clone https://$HF_USERNAME:$HF_TOKEN@huggingface.co/spaces/$HF_USERNAME/$SERVICE_DIR hf_upload/$SERVICE_DIR
          cd hf_upload/$SERVICE_DIR
          git checkout main || git checkout -b main

          # Copy latest build & metadata
          cp ../../$SERVICE_DIR/Dockerfile . || true
          cp ../../$SERVICE_DIR/README.md . || true

          cat <<EOF > build-vars.env
          SERVICE_NAME=$SERVICE_DIR
          GITHUB_BUILD_ID=$GITHUB_BUILD_ID
          GITHUB_REPO=$GITHUB_REPO
          EOF

          git config user.name "CI/CD Pipeline"
          git config user.email "cicd-pipeline@github.com"

          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "Fresh deploy for $SERVICE_DIR"
            git push https://$HF_USERNAME:$HF_TOKEN@huggingface.co/spaces/$HF_USERNAME/$SERVICE_DIR main
            echo "Pushed fresh deployment for $SERVICE_DIR"
          else
            echo "No changes to commit for $SERVICE_DIR"
          fi

      - id: collect
        run: |
          echo "built=[\"${{ matrix.service }}\"]" >> $GITHUB_OUTPUT
          echo "Successfully built and deployed ${{ matrix.service }}"

  dispatch-cleanup:
    needs: build-and-deploy
    if: needs.build-and-deploy.outputs.built-services != ''
    runs-on: ubuntu-latest
    steps:
      - uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          repository: ${{ github.repository }}
          event-type: cleanup-old-artifacts
          client-payload: |
            { "services": ${{ needs.build-and-deploy.outputs.built-services }} }
